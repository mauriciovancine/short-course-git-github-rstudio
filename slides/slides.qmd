---
title: "Controle de versão com git, GitHub e RStudio"
subtitle: "<br>Unicamp"
author: "[Maurício Vancine](https://mauriciovancine.github.io/)<br>Matheus Moroti"
date: "03/10/2025"
date-format: long
format: 
  revealjs:
    theme: [custom.scss]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
    chalkboard: true
    logo: "https://git-scm.com/images/logos/downloads/Git-Logo-1788C.png"
    execute:
      echo: true
      eval: true
      warning: false
      message: false
editor: source
lang: pt-br
---

## Conteúdo

- utilidade e importancia (exemplos - fair)
- reprodutibilidade - ambiente virtual
- controle de versao
- git vs github
- repositorio local e remoto 
- readme.md
- fluxo de trabalho com git
- fork > clone > add/commmit/push > branch? > pull request 
- show, log, diff, .gitignore, branch?, merge, checkout e switch

## Maurício Vancine 

::: columns
::: {.column width="50%"}
<center>
<br>
![](img/avatar_mhv.png)
</center>
:::

::: {.column width="50%"}
::: {style="font-size: 80%;"}
<br>

- Ecólogo e Doutor em Ecologia
- Pós-Doutorado em Ecologia Espacial
- Ecologia Espacial
- Modelagem Ecológica
- Análise de Dados Ecológicos e Espaciais
- Ecologia e Conservação de Anfíbios
- *Open source* (R, QGIS, GNU/Linux)
:::
:::
:::

## Matheus Moroti

::: columns
::: {.column width="50%"}
<center>
<br>
![](img/avatar.png)
</center>
:::

::: {.column width="50%"}
::: {style="font-size: 80%;"}
<br>

- Ecólogo e Doutor em Ecologia
- Pós-Doutorado em Ecologia Espacial
- Ecologia Espacial
- Modelagem Ecológica
- Análise de Dados Ecológicos e Espaciais
- Ecologia e Conservação de Anfíbios
- *Open source* (R, QGIS, GNU/Linux)
:::
:::
:::

## Workshop

- Carga horária bem enxuta: 06 h
- Parte teórica: 03 h (manhã)
- Parte prática: 03 h (tarde)
- Nosso principal **objetivo** é **introduzir** o tema de reprodutibilidade e controle de versão
- Vamos indicar muito **material** para estudo
- Cursos são ótimo para **"quebrar o gelo"**, mas o aprendizado depende de vocês

## Conteúdo{.smaller}

::: columns
::: {.column width="50%"}
::: nonincremental
1. Princípio FAIR (*Findable*, *Accessible*, *Interoperable*, *Reusable*)
2. Conferindo os computadores
3. Ambiente virtual (*renv*)
4. Controle de versão
5. git e GitHub 
6. Detalhes do GitHub
7. Controle de versão na prática
8. GitHub: Fork
9. Configuração: *git config*
10. Iniciando localmente: *git init*
11. Iniciando remotamente: *git clone*
:::
:::

::: {.column width="50%"}
::: nonincremental
12. Versionamento: *git add*, *git commit* e *git status*
13. Ignorando: *.gitignore*
14. Histórico: *git log* e *git show*
15. Diferenças: *git diff*
16. Desfazer: *git revert* e *git reset*  
17. Ramificações: *git branch*, *git switch* e *git merge*
18. Remoto: *git remote*, *git push* e *git pull*
19. GitHub: Pull request
20. Interface gráfica do RStudio  
:::
:::

:::

## IMPORTANTE!!!

**Estamos num espaço seguro e amigável**

- Sintam-se à vontade para me interromper e tirar dúvidas

<center>
<img src="img/general_starwars_teamwork.png" style="width:50%"/>
</center>

::: footer
[\@allison_horst](https://twitter.com/allison_horst)
:::

# 1. Princípio FAIR 

## 1. Princípio FAIR 

- *Findable*, *Accessible*, *Interoperable*, *Reusable*

# 2. Conferindo os computadores

# 
![](img/general_hard_soft.png){fig-align='center'}

:::footer
[Café com Código](https://www.instagram.com/cafecomcodigo/?hl=pt)
:::

## 2. Conferindo os computadores

<br>
**R (>4.4.x)**  
[https://www.r-project.org/](https://www.r-project.org/)

<br>

**RStudio (>2024.12.x)**  
[https://www.rstudio.com/](https://www.rstudio.com/)

<br>

**git (>2.48.x)**  
[https://git-scm.com/](https://git-scm.com/)

# 3. Ambiente virtual (*renv*)

## 3. Ambiente virtual (*renv*)


# 4. Controle de versão

# 
![](img/git_work.png){fig-align='center'}


## 4. Controle de versão

Quem nunca...

![](img/git_file_version.png){fig-align='center'}

:::footer
[PhD Comics](https://phdcomics.com/)
:::

## 4. Controle de versão

Manejar projetos **individualmente**

<br><br>
![](img/git_one_brantch.png){.absolute width=80% right=100 top=250}

## 4. Controle de versão

Manejar projetos **compartilhados**

![](img/git_multi_brantch.png){.absolute width=90% right=50 top=200}

## 4. Controle de versão

Manejar projetos **no tempo**

![](img/git_time.png){fig-align='center'}

:::footer
[Creating and Hosting a Personal Site on GitHub](https://jmcglone.com/guides/github-pages/)
:::

## 4. Controle de versão

Principal **ferramenta** utilizada em grandes projetos

![](img/git_article.png){.absolute width=50% right=520 top=150}
![](img/git_article_fig.png){.absolute width=60% right=-150 top=150}
![](img/git_article_table.png){.absolute width=50% right=520 top=400}

:::footer
[Perez-Riverol et al. (2016)](https://doi.org/10.1371/journal.pcbi.1004947)
:::

# 5. git e GitHub

## 5. git e GitHub

**git**

- Software (app) que faz o **controle de versão**
- Maneja os **repositórios locais** (computador) e **remotos** (e.g. GitHub)

![](img/git_logo.png){.absolute width=60% right=200 top=370}

:::footer
[git](https://git-scm.com/)
:::

## 5. git e GitHub

**git**

- Criado por **Linus Torvalds** em 2005 para substituir o BitKeeper SCM no gerenciamento do Kernel Linux
-  Software livre, distribuído sob a licença GNU GPL v.2

![](img/general_linus.jpg){.absolute width=50% right=480 top=350}
![](img/general_tux.png){.absolute width=40% right=0 top=320}

:::footer
[kernel](https://www.kernel.org/)
:::

## 5. git e GitHub

**git**

<p align="center">
<iframe width="80%" height="480" align="center" src="https://www.youtube.com/embed/6Czd1Yetaac" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</p>

## 5. git e GitHub

**GitHub**

- Repositórios remotos  
- **Plataformas de hospedagem** de códigos com controle de versão

![](img/github_logo2.png){.absolute width=50% right=600 top=350}
![](img/gitlab_logo.png){.absolute width=28% right=350 top=350}
![](img/bitbucket.webp){.absolute width=28% right=0 top=350}

:::footer
[GitHub](https://www.kernel.org/), [GitLab](https://www.kernel.org/), [Bitbucket](https://bitbucket.org/)
:::

## 5. git e GitHub

**ATENÇÃO: dois conceitos!**  

- **git**: software (app) que faz o controle de versão
- **GitHub**: plataforma para hospedar arquivos versionados

![](img/git_github_diff.png){.absolute width=75% right=150 top=300}

:::footer
[Is Git the Same Thing as Github!?](https://jahya.net/blog/git-vs-github/)
:::

## 5. git e GitHub

**ATENÇÃO: dois conceitos!**  

- **git**: software (app) que faz o controle de versão
- **GitHub**: plataforma para hospedar arquivos versionados

![](img/git_github_link.png){.absolute width=70% right=160 top=300}

## 5. git e GitHub

**GitHub**

Vamos criar uma conta no GitHub (caso não possuam)

![](img/github_logo.png){.absolute width=50% right=250 top=200}

:::footer
[GitHub](https://github.com)
:::

## 5. git e GitHub

**GitHub**

Salvem ou recuperem essas informações!

<br><br>

**username**: mauriciovancine  
**email**: mauricio.vancine@gmail.com  
**senha**: !@#$%¨&*+

![](img/gif_gandalf.gif){.absolute width=40% right=-100 top=300}

# 6. Detalhes do GitHub

## 6. Detalhes do GitHub

**Perfil**

- **Overview**: suas informações (rede social)
- **Repositories**: lista todos os repositórios
- **Projects**: ferramentas de gerenciamento (Kanban e tarefas)
- **Packages**: pacotes (bibliotecas) ou containers (Docker)
- **Stars**: respositórios marcados com estrela
- **Settings**: superior direito > foto do perfil > settings

## 6. Detalhes do GitHub

**Repositório**

::: {style="font-size: 80%;"}
- **Code**: arquivos, histórico, clone/download e README.md
- **Issues**: rastrear bugs, sugestões de melhorias ou tarefas
- **Pull requests**: gerencia propostas de alterações no código
- **Actions**: gerencia fluxos de trabalho automatizados
- **Projects**: ferramentas de gerenciamento visual (Kanban)
- **Wiki**: documentação extensa e detalhada do projeto
- **Security**: ajuda a gerenciar a segurança do código
- **Insights**:  fornece análises detalhadas sobre o repositório
- **Settings**: gerencia as configurações do repositório
:::

## 6. Detalhes do GitHub

**README.md**

- Arquivo de documentação principal de um repositório
- Escrito em Markdown (formatação simples e amigável)
- Aparece automaticamente na página inicial do repositório
- Fornece informações essenciais sobre o projeto
- Apresenta o propósito do projeto
- Explica o conteúdo dos arquivos de códigos e diretórios

::: footer
[Markdown](https://daringfireball.net/projects/markdown/), [Markdown Guide](https://www.markdownguide.org/)
:::

## Prática 1

**Criar uma página inicial para o perfil do GitHub**

![](https://www.alura.com.br/artigos/assets/como-criar-um-readme-para-seu-perfil-github/imagem1.gif)

::: footer
[Como criar um README para o seu perfil do GitHub](https://www.alura.com.br/artigos/como-criar-um-readme-para-seu-perfil-github?srsltid=AfmBOopGVNPqjqVMXQ42hTQpH0exadVwz6U8jsiiNDAyehD0k--sct7e)
:::

## Prática 1

**Criar uma página inicial para o perfil do GitHub**

1. Criem um repositório com o nome de usuário de vocês (e.g. `mauriciovancine`)
1. Criem um arquivo `README.md` nesse repositório
1. Preencham com algum conteúdo em Markdown
1. Comitem e voltem para a página de perfil

::: footer
[Como criar um README para o seu perfil do GitHub](https://www.alura.com.br/artigos/como-criar-um-readme-para-seu-perfil-github?srsltid=AfmBOopGVNPqjqVMXQ42hTQpH0exadVwz6U8jsiiNDAyehD0k--sct7e)
:::


# 7. Controle de versão na prática

## 7. Controle de versão na prática

**Duas formas de trabalhar com o git e GitHub**

::: {style="font-size: 80%;"}
1. Iniciando um projeto em nosso computador (git)
1. Iniciando por um repositório remoto (GitHub)
:::

![](img/github_logo.png){.absolute width=15% right=880 top=300}
![](img/git_operation.png){.absolute width=52% right=330 top=260}
![](img/git_logo.png){.absolute width=20% right=150 top=570}

## 7. Controle de versão na prática

![](img/git_github_workflow.png){.absolute width=100% right=0 top=100}
![](img/git_folder_project.png){.absolute width=5% right=220 top=630}

## 7. Controle de versão na prática

![](img/git_fork_clone_flow.png){.absolute width=45% right=250 top=100}

## 7. Controle de versão na prática

![](img/git_fork_clone_flow.png){.absolute width=45% right=250 top=100}
![](img/github_logo.png){.absolute width=30% right=700 top=150}
![](img/git_folder_project.png){.absolute width=15% right=780 top=520}
![](img/git_logo.png){.absolute width=25% right=-50 top=550}

# 8. GitHub: Fork

## 8. GitHub: Fork

**Fork**: cópia de um repositório remoto para o seu GitHub

![](img/git_fork.png){.absolute width=45% right=250 top=150}

## Prática 2

Forken o repositório do workshop

![](img/github_fork_site.png)

::: footer
[https://github.com/mauriciovancine/workshop-git-github-rstudio](https://github.com/mauriciovancine/workshop-git-github-rstudio)
:::

## 8. GitHub: Fork

Agora o repositório do workshop, que estava no meu GitHub, foi copiado ("garfado") para o GitHub de vocês

![](img/gif_fork.gif){.absolute width=70% right=200 top=220}

# 9. Configurações: RStudio, git, GitHub

## 9. Configurações

**RStudio**

![](img/rstudio.png){.absolute right=0 top=150}

## 9. Configurações

**RStudio**

::: {style="font-size: 80%;"}
- Tools > Global Options > Git/SVN
:::

![](img/rstudio_git_config01.png){.absolute width=80% right=0 top=200}

## 9. Configurações

**RStudio**

::: {style="font-size: 80%;"}
- Marque **Enable version control interface...**
- **Git executable**:
:::

::: {style="font-size: 65%;"}
- Windows: `C:/Program Files/Git/bin/git.exe`
- Ubuntu: `/usr/bin/git`
- Mac: `???`
:::

![](img/rstudio_git_config02.png){.absolute width=50% right=-100 top=180}

## 9. Configurações

**RStudio**

Chave SSH

::: {style="font-size: 80%;"}
1. Create RSA key
1. View public key
1. Copiar: Ctrl + C
:::

![](img/rstudio_git_config03.jpg){.absolute width=50% right=-100 top=180}
![](img/github_brave.jpg){.absolute width=45% right=500 top=400}
![](img/general_key.png){.absolute width=13% right=800 top=500}

## 9. Configurações

**GitHub**

::: {style="font-size: 80%;"}
- Perfil > Settings > SSH and GPG keys > New SSH key
:::

![](img/github_ssh_key.png){.absolute width=100% right=0 top=220}

::: footer
[Add ao GitHub](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
:::

## 9. Configurações

**GitHub**

::: {style="font-size: 80%;"}
- Title: um nome qualquer (eu add por nome de PC ou notebook)
- Key: colar (Ctrl + V)
- Add SSH key
:::

![](img/github_ssh_key_add.png){.absolute width=100% right=-230 top=220}

::: footer
[Add ao GitHub](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
:::

## 9. Configurações

**git**

::: {style="font-size: 80%;"}
- `git config`: definir as configurações de usuário do git
- Terminal (colar com `ctrl + shift + v`)
:::

```{r eval=FALSE}
# terminal
git config --list
git config --global user.name "meu nome"
git config --global user.email "email@dominio.com"
git config --list
```

![](img/git_config.png){.absolute width=80% right=100 top=450}

# Tudo certo até aqui?

# Agora sim, podemos começar o versionamento...

# 10. Iniciando localmente

## 10. Iniciando localmente
  
- `git init`: inicia o versionamento de um repositório local

![](img/git_init.png){.absolute width=40% right=550 top=180}
![](img/git_folder.png){.absolute width=65% right=-50 top=180}

# 11. Iniciando remotamente

## 11. Iniciando remotamente

- `git clone`: faz o download de um repositório remoto (e.g. GitHub) para o seu computador (repositório local)

![](img/git_clone.png){.absolute width=50% right=260 top=210}

:::footer
[Git 03: Git Clone - Work Locally On Your Computer](https://www.neonscience.org/resources/learning-hub/tutorials/github-git-clone)
:::

## 11. Iniciando remotamente

## Primeiro, vamos **criar uma pasta** chamada `github`

```{r eval=FALSE}
".                               # raiz"
"    ├── home/                   # home"
"        ├── data/               # dados" 
"            ├── github/         # todos os repositorios"
```

---

class: inverse, center, middle

# E como podemos fazer o clone?

---

background-image: url(img/github_clone_zip.png)
background-size: 900px
background-position: 50% 70%

# 8. Iniciando remotamente: git clone

## 1. **Download diretamente** do repositório remoto no formato **.zip**

---

background-image: url(img/github_clone_git.png)
background-size: 900px
background-position: 50% 80%

# 8. Iniciando remotamente: git clone

## 2. Usando o **terminal** para clonar pelo **SSH** (configurado anteriormente)

```{bash eval=FALSE}
# terminal
git clone git@github.com:mauriciovancine/short-course-git-github-rstudio.git
```

---

background-image: url(img/git_rstudio.jpg)
background-size: 500px
background-position: 55% 80%

# 8. Iniciando remotamente: git clone

## 3. Usando o **RStudio** para clonar pelo **SSH** (configurado anteriormente)

---

background-image: url(img/rstudio_git_create01.png), url(img/rstudio_project_logo.png)
background-size: 900px, 120px
background-position: 50% 85%, 95% 10%

# 8. Iniciando remotamente: git clone

## Criar um **Projeto R** com controle de versão

`File > New Project > Version Control`

---

background-image: url(img/rstudio_git_create02.png)
background-size: 900px
background-position: 50% 85%

# 8. Iniciando remotamente: git clone

## Escolher **clonar repositório** do GitHub

`Git`

---

background-image: url(img/rstudio_git_create03.png)
background-size: 750px
background-position: 50% 90%

# 8. Iniciando remotamente: git clone

### Preencher:

Repository URL: `git@github.com:mauriciovancine/short-course-git-github-rstudio.git`

Project directory name: `preenchimento automático`

Create project as subdirectory of: `/home/mude/data/github`

---

class: inverse, center, middle

# Se uma janela aparecer, basta digitar "yes" para criar uma autentificação

---

class: inverse, center, middle

# Vamos aguardar o download...

---

class: inverse, center, middle

# Agora sim, vamos começar o versionamento propriamente dito

---



# Dúvidas?

# Material de estudo

## Livros

- [ggplot2 (2016)](https://ggplot2.tidyverse.org/)

- [R Graphics Cookbook (2018)](http://www.cookbook-r.com/Graphs/)

- [R for Data Science (2017)](https://r4ds.had.co.nz/)

- [Data Visualization with R (2018)](https://rkabacoff.github.io/datavis/)

- [Fundamentals of Data Visualization (2019)](https://serialmentor.com/dataviz/)

- [Interactive web-based data visualization with R, plotly, and shiny (2019)](https://plotly-r.com/)

## Sites

- [ggplot2: Reference](https://ggplot2.tidyverse.org/reference/)

- [R Graph Gallery](https://www.r-graph-gallery.com/)

- [from Data to Viz](https://www.data-to-viz.com/)

- [The Data Visualisation Catalogue](https://datavizcatalogue.com/index.html)

- [plotly](https://plotly.com)

- [Statistical tools for high-throughput data analysis (STHDA)](http://www.sthda.com/english/)

## Muito obrigado!

::: columns
::: {.column width="50%"}
**Agradecimentos**:

- [Beatriz Milz](https://beatrizmilz.com/)

<center>
<img src="img/fapesp.png" style="width:70%"/>
</center>
:::

::: {.column width="50%"}
**Contato**:

[mauricio.vancine@gmail.com]()
[mauriciovancine.github.io](https://mauriciovancine.github.io/)

<center>
<img src="img/gif_frogs.gif" style="width:75%"/>
</center>

:::
:::

:::footer
Slides por [Maurício Vancine](https://mauriciovancine.github.io), feitos com [Quarto](https://quarto.org/). Código disponível no [GitHub](https://github.com/mauriciovancine/workshop-git-github-rstudio).
:::